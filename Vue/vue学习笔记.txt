初识vue
    root容器里的代码被称为Vue模板
    Vue实例和容器是一一对应的
    {{JS表达式}}

Vue模板语法有两大类
    1.插值语法：
        功能：用于解析标签体内容
        写法：{{xxx}}，xxx是JS表达式，且可以直接读取到data中的所有属性
    2.指令语法：
        功能：用于解析标签(包括：标签属性、标签体内容、绑定事件)
        举例：v-bind:href="xxx"或简写为:href="xxx"，xxx同样要写js表达式，且可以直接读取到data中的所有属性
        备注：Vue中有很多的指令，且形式都是：v-???，此处我们知识拿v-bind举个例子

el与data
    el的两种写法
        1.el:'#root'
        2.v.$mount('#root')
    data的两种写法
        1.对象式
        data:{}
        2.函数式
        data:function(){
            return{
                xxx
            }
        }
        或
        data(){
            return{

            }
        }
        ?????

    data的两种写法的区别
        在组件中，如果同一个组件在同一个页面被用了两次以上且涉及数据修改，那么修改同步
        而如果采用函数式并通过return对象的方式，每次return的都是一个全新的对象，可以做到同一个组件在不同地方使用互不干扰


component几个注意点
    1.关于组建名：
        一个单词组成：
            第一种写法(首字母小写)：school
            第二种写法(首字母大写)：school
        多个单词组成：
            第一种写法(kebab-case)：my-school
            第二种写法(CamelCase命名)：MySchool(需要Vue脚手架支持)
        备注：
            组件名尽可能回避HTML中已有的元素名称，例如：h2、H2（会自动转换为h2且不报错不显示）都不行
            可以使用name配置指定组件在开发者工具中呈现的名字
    
    2.关于组件标签：
        第一种写法：<school></school>
        第二种写法：<school/>
        备注：不要使用脚手架时，<school/>会导致后续组件不能渲染
    
    3.一个简写方式
        const school = Vue.extend(option)可简写为：const school = option

TodoList案例总结
    实现动态组件：考虑好数据的存放位置，数据是一个组件在用，还是一些组件在用：
        1.一个组件在用：放在组件自身即可
        2.一些组件在用：放在他们共同的父组件上(状态提升)
    props适用于：
        1.父组件 ==> 子组件 通信
        2.子组件 ==> 父组件 通信(要求父先给子一个函数)
    使用v-model时注意：v-model绑定的值不能是props传过来的值，因为props时不可以修改的
    props传过来的若是对象类型的值，修改对象中的属性时Vue不会报错，但不推荐这样做